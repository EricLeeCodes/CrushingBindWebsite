@using Blazored.LocalStorage
@using Client.Providers
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService

<div class="admin-area-sidebar bg-dark d-flex flex-column flex-shrink-0 p-3">
    <a href="/" class="btn bg-lightgray hover-bg-white text-dark my-4 shadow">
        <i class="fas fa-eye"></i>
        <p class="md-and-smaller-d-none d-inline">
            Public Site
        </p>
    </a>

    <button @onclick="SignOut" class="btn bg-lightgray hover-bg-white text-dark shadow">
        <i class="fas fa-sign-out-alt"></i> <p class="md-and-smaller-d-none d-inline">Sign Out</p>
    </button>

    <hr class="my-4 text-white" />

    <ul class="nav nav-pills mb-auto">
        <li class="nav-item w-100">
            <a href="@AdminIndexPageUri"
               class="nav-link w-100 text-center shadow @(IsPageActive(AdminIndexPageUri) ? "active" : "text-white")">
                <i class="fas fa-home"></i> <p class="md-and-smaller-d-none d-inline"> Overview </p>
            </a>
        </li>
        y
        <li class="nav-item w-100 mt-4">
            <a href="@s_adminArchiveModelsPageUri"
               class="nav-link w-100 text-center shadow @(IsPageActive(s_adminArchiveModelsPageUri) ? "active" : "text-white")">
                <i class="fas fa-th"></i> <p class="md-and-smaller-d-none d-inline"> Archives </p>
            </a>
        </li>

        <li class="nav-item w-100 mt-4">
            <a href="@s_adminPostsPageUri"
               class="nav-link w-100 text-center shadow @(IsPageActive(s_adminPostsPageUri) ? "active" : "text-white")">
                <i class="far fa-file"></i> <p class="md-and-smaller-d-none d-inline"> Novel Posts </p>
            </a>
        </li>

    </ul>

</div>





@code
{
    //Automatically sign in a user if a bearer token is in the user's local storage
    protected override async Task OnInitializedAsync() => await SignInWithBrowserLocalStorageBearerToken();

    private async Task SignInWithBrowserLocalStorageBearerToken()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }

    private async Task SignOut()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");

            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();

            StateHasChanged();
        }
    }

    public const string AdminIndexPageUri = "/admin";
    private static string s_adminArchiveModelsPageUri = $"{AdminIndexPageUri}/archivemodels";
    private static string s_adminPostsPageUri = $"{AdminIndexPageUri}/posts";
    private bool IsPageActive(string pageToCheckUri)
    {

        //Skip(2) to skip the three slashes in https://
        string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(2).ToArray();

        if (pageToCheckUri == AdminIndexPageUri)
        {
            if (currentUriSplitBetweenSlashes.Last() == "admin")
            {
                return true;
            }
        }

        //Skip(2) to remove the starting slash and the admin
        string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(2).ToArray();
        foreach (string currentUriPart in currentUriSplitBetweenSlashes)
        {
            foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
            {
                if (pageToCheckUriPart == currentUriPart)
                {
                    return true;
                }
            }
        }



        return false;
    }

}

@using System.Net.Http.Headers
@using Blazored.LocalStorage
@using Client.Providers
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService


<header>

    <AuthorizeView Roles="Administrator">
        <Authorized Context="Auth">
            <div class="shadow-no-hover bg-lightgray p-3">
                <p class="d-inline ms-lg-5">You're seeing this bar because you're signed in as the administrator</p>

                <a href="/admin" class="btn bg-lightgray hover-bg-white shadow text-dark ms-3 mx-2 md-and-smaller-my-3">
                    <i class="fas fa-wrench"></i>    
                    <p class="md-and-smaller-d-none d-inline">Admin area</p>
                </a>

                <button @onclick="SignOut" class="btn bg-lightgray hover-bg-white shadow text-dark mx-2 md-and-smaller-my-3">
                    <i class="fas fa-sign-out-alt"></i> <p class="md-and-smaller-d-none d-inline">Sign out</p>
                </button>
            </div>
        </Authorized>
    </AuthorizeView>


    <nav class="navbar navbar-expand-lg d-flex cloudy-serif navbar-light
            justify-content-between align-items-center pb-lg-3">
        <div class="m-0">
            <a href="/" class="navbar-brand md-f-size-1-5 text-dark fw-bold">
                <img class="navbar-brand img ps-4" src="assets/img/Logo/CrushingBindLogo.png" alt="Website Icon" /> Crushing Bind
            </a>
        </div>

        @*Collapses the navbar for smaller screens*@
        <button class="navbar-toggler mx-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class=navbar-toggler-icon></span>
        </button>

        @*Navigation menu links*@
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a href=@HomePageUri class="nav-link md-and-smaller-my-3
                    @(IsPageActive(HomePageUri) ? "active" : string.Empty)">
                        Home
                    </a>
                </li>
                <li class="nav-item">
                    <a href=@ArchivesPageUri class="nav-link md-and-smaller-my-3
                    @(IsPageActive(ArchivesPageUri) ? "active" : string.Empty)">
                        Archives
                    </a>
                </li>
                <li class="nav-item">
                    <a href=@CharactersPageUri class="nav-link md-and-smaller-my-3
                    @(IsPageActive(CharactersPageUri) ? "active" : string.Empty)">
                        Characters
                    </a>
                </li>
                <li class="nav-item">
                    <a href=@AboutPageUri class="nav-link md-and-smaller-my-3
                    @(IsPageActive(AboutPageUri) ? "active" : string.Empty)">
                        About
                    </a>
                </li>
            </ul>

        </div>
    </nav>

</header>



@code
{
    //Automatically sign in a user if a bearer token is in the user's local storage
    protected override async Task OnInitializedAsync() => await SignInWithBrowserLocalStorageBearerToken();

    private async Task SignInWithBrowserLocalStorageBearerToken()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }

    private async Task SignOut()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");

            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();

            StateHasChanged();
        }
    }


    //Page URI's
    private const string HomePageUri = "/";
    private const string ArchivesPageUri = "/archives";
    private const string CharactersPageUri = "/characters";
    private const string AboutPageUri = "/about";

    private bool IsPageActive(string pageToCheckUri)
    {

        //Skip(3) to skip the three slashes in https://example.com/
        string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(3).ToArray();

        if (pageToCheckUri == HomePageUri)
        {
            if (currentUriSplitBetweenSlashes.Last().Length == 0)
            {
                return true;
            }
        }

        //Deeper URIs
        string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();
        foreach (string currentUriPart in currentUriSplitBetweenSlashes)
        {
            foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
            {
                if (pageToCheckUriPart == currentUriPart)
                {
                    return true;
                }
            }
        }



        return false;
    }

}

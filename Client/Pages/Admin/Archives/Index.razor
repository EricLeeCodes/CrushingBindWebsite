@page "/admin/archives"
@using Client.Components.Admin
@inject InMemoryDatabaseCache InMemoryDatabaseCache


<main class="admin-area-main">

    <Sidebar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1> Archives </h1>
                <br />
                <hr />
                <br />

                    @if (InMemoryDatabaseCache.ArchiveModels == null)
                    {
                        <LoadingHeart/>
                    }
                    else
                    {
                        <a href="/admin/archives/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                            <i class="fas fa-plus"></i> Create Archive
                        </a>

                        <button @onclick="() => InMemoryDatabaseCache.GetArchiveModelsFromDatabaseAndCache()"
                            class="btn btn-primary shadow md-f-size-1-5">
                            <i class="fas fa-sync"></i> Refresh data
                        </button>

                    <br />
                    <br />
                    <br />

                    @if (InMemoryDatabaseCache.ArchiveModels.Count < 1)
                    {
                        <h1>No categories found. Please create one.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Chapter</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var archive in InMemoryDatabaseCache.ArchiveModels)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@archive.ArchiveChapterNumber</p>
                                            </th>
                                            <td class="w-15">
                                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{archive.ArchiveThumbnailImagePath}")"
                                                     class="admin-index-thumbnail-image center" alt="Archive thumbnail image"/>
                                            </td>
                                            <td class="w-70">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/archives/update/@archive.ArchiveId"
                                                       class="btn btn-update shadow md-f-size-1-5 align-self-center btn-width-50">
                                                        <i class="fas fa-edit"></i> Update
                                                   </a>

                                                   <br/>

                                                   <button class="btn btn-danger shadow md-f-size-1-5 align-self-center btn-width-50">
                                                       <i class="fas fa-trash"></i> Delete
                                                   </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }

            </div>
        </div>
    </div>

</main>


@implements IDisposable
@code
{
    protected override async Task OnInitializedAsync()
    {
        InMemoryDatabaseCache.OnArchiveModelsDataChanged += StateHasChanged;

        if (InMemoryDatabaseCache.ArchiveModels == null)
        {
            await InMemoryDatabaseCache.GetArchiveModelsFromDatabaseAndCache();
        }
    }


    public void Dispose() => InMemoryDatabaseCache.OnArchiveModelsDataChanged -= StateHasChanged;
}
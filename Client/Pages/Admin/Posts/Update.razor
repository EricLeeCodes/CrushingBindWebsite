@page "/admin/posts/update/{PostId:int}"
@using System.Net;
@using Client.Components.Admin
@inject HttpClient HttpClient
@inject InMemoryDatabaseCache InMemoryDatabaseCache
@inject IJSRuntime JSRuntime


<main class="admin-area-main">
    <Sidebar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">

                <h1 class="mb-4">Update Post</h1>

                @if (_postToUpdate == null)
                {
                    <LoadingHeart />
                }
                else
                {
                    <EditForm Model="_postToUpdate" OnValidSubmit="UpdatePost">
                        <DataAnnotationsValidator />

                        @if (InMemoryDatabaseCache.ArchiveModels == null)
                        {
                            <LoadingHeart />
                        }
                        else
                        {
                            <div class="form-group mb-5">
                                <label for="postArchive"> Archive Chapters </label>
                                <InputSelect @bind-Value="@_postToUpdate.ArchiveId" class="form-control" id="postArchive">
                                    @foreach (var archive in InMemoryDatabaseCache.ArchiveModels)
                                    {
                                        <option value="@archive.ArchiveId">@archive.ArchiveChapterNumber</option>
                                    }
                                </InputSelect>
                            </div>
                        }



                        <div class="form-group mb-5">
                            <label for="postTitle">Post title</label>
                            <InputText @bind-Value="_postToUpdate.Title" class="form-control" id="postTitle"></InputText>
                        </div>

                        <div class="form-group mb-5">
                            <label for="borderImage"> Intro Border Image </label>

                            @if (_attemptingToUploadImage == true)
                            {
                                <LoadingHeart />
                            }
                            else if (_attemptToUploadFailed == true)
                            {
                                <h4 class="text-danger">Failed to upload image. @_reasonImageUploadFailed</h4>
                            }
                            else
                            {
                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{_postToUpdate.IntroBorder}")"
                             class="admin-crud-form-thumbnail-image center" alt="Archive thumbnail image" />
                            }

                            <br />

                            <InputFile OnChange="HandleUploadedImage" class="form-control mt-4" id="borderImage" />
                        </div>

                        <div class="form-group mb-5">
                            <label for="thumbnailImage"> Thumbnail Image </label>

                            @if (_attemptingToUploadImage == true)
                            {
                                <LoadingHeart />
                            }
                            else if (_attemptToUploadFailed == true)
                            {
                                <h4 class="text-danger">Failed to upload image. @_reasonImageUploadFailed</h4>
                            }
                            else
                            {
                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{_postToUpdate.ArchiveThumbnailImagePath}")"
                             class="admin-crud-form-thumbnail-image center" alt="Archive thumbnail image" />
                            }

                            <br />

                            <InputFile OnChange="HandleUploadedImage" class="form-control mt-4" id="thumbnailImage" />
                        </div>


                        <div class="form-group mb-5">
                            <label for="postExcerpt">Post excerpt</label>
                            <InputText @bind-Value="_postToUpdate.Excerpt" class="form-control" id="postExcerpt"></InputText>
                        </div>

                        <div class="form-group mb-5 flex-shrink-1">
                            <label>Post content</label>

                            <div @ref="_quillJSEditorDiv" class="border border-secondary p-4"></div>
                        </div>

                        <div class="form-group mb-5">
                            <label for="postPublished">Post published</label>
                            <InputCheckbox @bind-Value="@_postToUpdate.Published" class="form-check-input" id="postPublished" aria-describedby="postPublishedHelp" />
                            <div id="postPublishedHelp" class="form-text">
                                The value of this specifies whether this blog post is visible on the user facing site or not.
                                Publishing a blog post also updates the value of the PublishDate field.
                            </div>
                        </div>

                        <ValidationSummary />

                        <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                            <i class="far fa-save"></i> Save
                        </button>

                    </EditForm>
                }


                <a href="/admin/posts" class="btn btn-primary shadow mt-5 md-f-size-1-5">
                    <i class="fas fa-arrow-left"></i> Back to all posts
                </a>

            </div>
        </div>
    </div>

</main>


@code
{
    [Parameter] public int PostId { get; set; }

    private ElementReference _quillJSEditorDiv; //contains HTML element where it gets rendered
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InMemoryDatabaseCache.ArchiveModels == null)
            {
                await InMemoryDatabaseCache.GetArchiveModelsFromDatabaseAndCache(false);
                StateHasChanged();
            }

            await JSRuntime.InvokeVoidAsync("QuillFunctions.updateQuill", _quillJSEditorDiv, true);
        }
    }


    private PostDTO _postToUpdate = new PostDTO() { ArchiveThumbnailImagePath = "uploads/placeholder.jpg", IntroBorder = "uploads/intro_border.png" };
    private bool _attemptingToUpdate = false;
    private bool _attemptToUpdateFailed = false;
    private bool _updateSuccessful = false;

    private async Task UpdatePost()
    {
        _attemptingToUpdate = true;

        _postToUpdate.Content = await JSRuntime.InvokeAsync<string>("QuillFunctions.getQuillContent", _quillJSEditorDiv, true);

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<PostDTO>(APIEndpoints.s_posts, _postToUpdate);

        if (response.StatusCode == HttpStatusCode.Updated)
        {
            Post addedPost = await response.Content.ReadFromJsonAsync<Post>();
            addedPost.ArchiveModel = await InMemoryDatabaseCache.GetArchiveByArchiveId(addedPost.ArchiveId, false);
            InMemoryDatabaseCache.Posts.Add(addedPost);

            _updateSuccessful = true;
        }
        else
        {
            _attemptToUpdateFailed = true;
        }

        _attemptingToUpdate = false;

    }


    private bool _attemptingToUploadImage = false;
    private bool _attemptToUploadFailed = false;
    private string _reasonImageUploadFailed = null;

    private async Task HandleUploadedImage(InputFileChangeEventArgs e)
    {
        _attemptingToUploadImage = true;

        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            _reasonImageUploadFailed = "Please only upload JPEG, JPG, or PNG file.";
            _attemptToUpdateFailed = true;
        }

        //31457280 is 30 megabytes
        else if (e.File.Size >= 31457280)
        {
            _reasonImageUploadFailed = "Please only upload images that are smaller than 30 MegaBytes (MB).";
            _attemptToUploadFailed = true;
        }
        else
        {
            IBrowserFile uploadedImageFile = e.File;

            byte[] imageAsByteArray = new byte[uploadedImageFile.Size];

            //Fills the contents of the image byte array.
            await uploadedImageFile.OpenReadStream(31457280).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new UploadedImage()
                {
                    // Subtract 4 to get  .jpg, .png, etc.
                    NewImageFileExtension = uploadedImageFile.Name.Substring(uploadedImageFile.Name.Length - 4),
                    NewImageBase64Content = byteString,
                    OldImagePath = string.Empty
                };

            HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UploadedImage>(APIEndpoints.s_imageUpload, uploadedImage);

            if (response.StatusCode == HttpStatusCode.Updated)
            {
                _postToUpdate.ArchiveThumbnailImagePath = await response.Content.ReadAsStringAsync();
            }
            else
            {
                _reasonImageUploadFailed = $"Something went wrong with the request to the server. Server response code: {response.StatusCode}. Server reason: {response.ReasonPhrase}.";
                _attemptToUploadFailed = true;
            }
        }

        _attemptingToUploadImage = false;
        StateHasChanged();
    }


}